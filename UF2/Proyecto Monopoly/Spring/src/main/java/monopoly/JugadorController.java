package monopoly;

import java.util.ArrayList;
import java.util.Optional;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/Jugador") // This means URL's start with /demo (after Application path)
public class JugadorController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private JugadorRepository repository;
	@Autowired
	private PropiedadRepository propiedadRepository;
	@Autowired
	private FerrocarrilRepository ferrocarrilRepository;
	@Autowired
	private ColorRepository colorRepository;
	
	@GetMapping(path = "/All")
	public @ResponseBody Iterable<Jugador> getAllUsers() {
		// This returns a JSON or XML with the users
		return repository.findAll();
	}

	@GetMapping(path = "/ComprovarPropietari/{id}")
	public @ResponseBody Jugador comprovarPropietari(@PathVariable Integer id) {
		Optional<Propiedad> propiedad = propiedadRepository.findById(id);
		if (propiedad.isPresent()) {
			Propiedad p = propiedad.get();
			return p.getPropietario();
		} else
			return null;
	}


	@GetMapping(path = "/Comprar")
	public @ResponseBody String Comprar(@RequestParam Integer idJugador, @RequestParam Integer idPropiedad) {
		Optional<Propiedad> propiedad = propiedadRepository.findById(idPropiedad);
		Optional<Jugador> jugador = repository.findById(idJugador);

		if (propiedad.isPresent() && jugador.isPresent()) {
			Propiedad p = propiedad.get();
			Jugador j = jugador.get();

			if (comprovarPropietari(idPropiedad) != null)
				return "<h1>La Propiedad ya tiene Propietario</h1>";
			else {
				int coste = p.getPrecio();
				modificarDiners(idJugador, -coste);

				p.setPropietario(j);
				Set<Propiedad> propiedades = j.getPropiedades();
				propiedades.add(p);
				j.setPropiedades(propiedades);
				j.setnPropiedades(j.getnPropiedades() + 1);
				repository.save(j);
				propiedadRepository.save(p);
				
				if(comprovarColor(idPropiedad)){
					Color c = p.getColor();
					c.setJugador(j);
					colorRepository.save(c);
				}
				
				return "<h1>Saved</h1>";
			}
		}
		return "<h1>Error</h1>";
	}

	@GetMapping(path = "/ComprovarColor/{id}")
	public @ResponseBody boolean comprovarColor(@PathVariable Integer id) {
		Optional<Propiedad> propiedad = propiedadRepository.findById(id);
		boolean flag = true;
		if (propiedad.isPresent()) {
			Propiedad p = propiedad.get();
			Color c = p.getColor();
			Jugador j = p.getPropietario();

			for (Propiedad pr : c.getPropietats()) {
				if(comprovarPropietari(pr.getId_propiedad()) != null) {
					if (!comprovarPropietari(pr.getId_propiedad()).equals(j)) {
						flag = false;
					}
				}else {
					flag = false;
				}
				
			}
			return flag;
		}
		return false;
	}

	@GetMapping(path = "/PagarLloguer")
	public @ResponseBody String pagarLloguer(@RequestParam Integer idJugador, @RequestParam Integer idPropiedad) {
		Optional<Propiedad> propiedad = propiedadRepository.findById(idPropiedad);
		Optional<Jugador> jugador = repository.findById(idJugador);

		if (propiedad.isPresent() && jugador.isPresent()) {
			Propiedad p = propiedad.get();
			Jugador j = jugador.get();

			int dinero = 0;
			int nPropiedades = j.getnPropiedades();

			if (nPropiedades == 0)
				dinero = p.getAlquiler();
			else if (nPropiedades == 1)
				dinero = p.getAlquiler1();
			else if (nPropiedades == 2)
				dinero = p.getAlquiler2();
			else if (nPropiedades == 3)
				dinero = p.getAlquiler3();
			else if (nPropiedades == 4)
				dinero = p.getAlquiler4();
			else if (nPropiedades == 5)
				dinero = p.getAlquilerHotel();

			modificarDiners(idJugador, -dinero);
			modificarDiners(p.getPropietario().getId_jugador(), dinero);
						
			return "<h1>Saved</h1>";
		}
		return "<h1>Error</h1>";
	}

	@GetMapping(path = "/PagarLloguerFerrocarril")
	public @ResponseBody String pagarLloguerFerrocarril(@RequestParam Integer idJugador, @RequestParam Integer idFerrocarril) {

		int nEstaciones = 0;
		Optional<Jugador> jugador = repository.findById(idJugador);
		Optional<Ferrocarril> ferrocarril = ferrocarrilRepository.findById(idFerrocarril);

		if (ferrocarril.isPresent() && jugador.isPresent()) {
			Jugador j = jugador.get();
			Ferrocarril f = ferrocarril.get();

			Jugador propietario = f.getPropietario();

			for (Propiedad p : propietario.getPropiedades()) {
				if (p instanceof Ferrocarril) {
					nEstaciones++;
				}
			}
			if (nEstaciones != 0) {
				modificarDiners(idJugador, -(nEstaciones * 25));
				modificarDiners(propietario.getId_jugador(), (nEstaciones * 25));
				return "<h1>Saved</h1>";
			}
		}

		return "<h1>Error</h1>";
	}

	@GetMapping(path = "/ModificarDiners")
	public @ResponseBody String modificarDiners(@RequestParam Integer idJugador, @RequestParam int cantidad) {
		Optional<Jugador> jugador = repository.findById(idJugador);
		if (jugador.isPresent()) {
			Jugador j = jugador.get();
			j.setDinero(j.getDinero() + cantidad);
			repository.save(j);
			return "<h1>Saved</h1>";
		} else
			return "<h1>Error</h1>";
	}

	@GetMapping(path = "/Hipotecar")
	public @ResponseBody String hipotecar(@RequestParam Integer idJugador, @RequestParam Integer idPropiedad) {
		Optional<Propiedad> propiedad = propiedadRepository.findById(idPropiedad);
		Optional<Jugador> jugador = repository.findById(idJugador);

		if (propiedad.isPresent() && jugador.isPresent()) {
			Propiedad p = propiedad.get();
			Jugador j = jugador.get();

			if (p.isHipotecado() || j != comprovarPropietari(p.getId_propiedad()))
				return "<h1>Error</h1>";

			p.setHipotecado(true);
			modificarDiners(idJugador, p.getPrecio_hipoteca());

			propiedadRepository.save(p);
			
			return "<h1>Saved</h1>";
		}
		return "<h1>Error</h1>";
	}

	@GetMapping(path = "/Deshipotecar")
	public @ResponseBody String deshipotecar(@RequestParam Integer idJugador, @RequestParam Integer idPropiedad) {
		Optional<Propiedad> propiedad = propiedadRepository.findById(idPropiedad);
		Optional<Jugador> jugador = repository.findById(idJugador);

		if (propiedad.isPresent() && jugador.isPresent()) {
			Propiedad p = propiedad.get();
			Jugador j = jugador.get();

			if (!p.isHipotecado() || j != comprovarPropietari(p.getId_propiedad())
					|| j.getDinero() < p.getPrecio_hipoteca())
				return "<h1>Error</h1>";

			p.setHipotecado(false);
			modificarDiners(idJugador, -p.getPrecio_hipoteca());

			propiedadRepository.save(p);
			
			return "<h1>Saved</h1>";
		}
		return "<h1>Error</h1>";
	}

	@GetMapping(path = "/Reassignar")
	public @ResponseBody Jugador reassignar() {
		ArrayList<Jugador> jugadors = (ArrayList<Jugador>) repository.findAll();

		for (Jugador j : jugadors) {
			if (j.getDinero() < 0) {
				repository.delete(j);
				jugadors.remove(j);
			}
		}

		if (jugadors.size() == 1) {
			System.out.println("Ha ganao " + jugadors.get(0).getNombre());
			return jugadors.get(0);
		}
		return null;
	}

}
