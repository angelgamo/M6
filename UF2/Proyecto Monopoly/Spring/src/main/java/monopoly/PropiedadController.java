package monopoly;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.ResponseBody;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/Propiedad") // This means URL's start with /demo (after Application path)
public class PropiedadController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private PropiedadRepository repository;
	@Autowired
	private JugadorRepository jugadorRepository;
	

	@GetMapping(path = "/ComprovarColor/{id}")
	public @ResponseBody boolean comprovarColor(@PathVariable Integer id) {
		Optional<Propiedad> propiedad = repository.findById(id);
		boolean flag = true;
		if (propiedad.isPresent()) {
			Propiedad p = propiedad.get();
			Color c = p.getColor();
			Jugador j = p.getPropietario();

			for (Propiedad pr : c.getPropietats()) {
				if (!pr.getPropietario().equals(j)) {
					flag = false;
				}
			}
			return flag;
		}
		return false;
	}
	
	@GetMapping(path = "/ModificarDiners")
	public @ResponseBody String modificarDiners(@RequestParam Integer idJugador, @RequestParam int cantidad) {
		Optional<Jugador> jugador = jugadorRepository.findById(idJugador);
		if (jugador.isPresent()) {
			Jugador j = jugador.get();
			j.setDinero(j.getDinero() + cantidad);
			jugadorRepository.save(j);
			return "<h1>Saved</h1>";
		} else
			return "<h1>Error</h1>";
	}

	@GetMapping(path="/Edificar")
		public @ResponseBody int edificar(@RequestParam Integer idJugador, @RequestParam Integer idPropiedad){
			Optional<Propiedad> propiedad = repository.findById(idPropiedad);
			Optional<Jugador> jugador = jugadorRepository.findById(idJugador);
			
			if (propiedad.isPresent() && jugador.isPresent()) {
				Propiedad p = propiedad.get();
				Jugador j = jugador.get();
				JugadorController jc = new JugadorController();
				if (p.getnCasas() < 5) {
					if(comprovarColor(p.getId_propiedad())) {
						modificarDiners(j.getId_jugador(), -p.getPrecio_por_casa());
						p.setnCasas(p.getnCasas() + 1);
						
						jugadorRepository.save(j);
						repository.save(p);
					}
					
				}

				return p.getnCasas();
			}
			else
				return 0;
		}

	
	@GetMapping(path="/All")
	public @ResponseBody Iterable<Propiedad> getAllUsers() {
		// This returns a JSON or XML with the users
		return repository.findAll();
	}
	
	@GetMapping(path = "/GetPropietatenCasella/{pos}")
	public @ResponseBody Propiedad getProptietatenCasella(@PathVariable Integer pos) {
		Iterable<Propiedad> propiedad = getAllUsers();
		
		for (Propiedad p : propiedad) {
			if (p.getPosicion() == pos) {
				return p;
			}
		}
		return null;

	}
	
	
}
